swagger: "2.0"
info:
  description: "This is the Delilah Restó Restaurant API. Where you can make your order online, and receive it in your home, easy and quick."
  version: "1.0.0"
  title: "Delilah Restó"
  termsOfService: "http://delilah/terms/"
  contact:
    email: "delilahresto@gmail.com.co"
  license:
    name: "Apache 2.0"
    url: "http://www.delilahresto.com.co"
host: "delilah.swagger.io"
basePath: "/v2"
tags:
- name: "products"
  description: "All about products CRUD (List of products, create, delete and update a product)."
- name: "orders"
  description: "All about orders CRUD (create, get, update, delete an order and create the order details)."
- name: "users"
  description: "All about users CRUD (create, get, update, and delete users)."
- name: "orderDetails"
  description: "Operations about order details CRUD (get, update, and delete order details)."
- name: "paymentMethods"
  description: "All about payment methods CRUD (create, get, update, and delete a payment method)."
- name: "orderStatuses"
  description: "All about order statuses CRUD (create, get, update, and delete an order status)."
schemes:
- "https"
- "http"
paths:
  /products/id:
    get:
      tags:
      - "products"
      summary: "Get a only product by id"
      description: ""
      operationId: "getPlate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "id"
        type: "integer"
        description: "Get product that want to get by id (param)."
        required: true
      - in: "header"
        name: "token"
        type: "string"
        description: "Token to authenticate."
        required: true  
      responses:
        "200":
          description: "Request successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/product"
        "403":
          description: "Session expired or User do not have permissions to access."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Expired"      
        "404":
          description: "Not Found"
    delete:
      tags:
      - "products"
      summary: "Delete a product by id"
      description: "Manager delete a product specific by id (param), only can delete products never added in an order previously."
      operationId: "deleteById"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "id"
        type: "integer"
        description: "Delete product that want by id (param)."
        required: true
      - in: "header"
        name: "token"
        type: "string"
        description: "Token to authenticate."
        required: true
      responses:
        "200":
          description: "Product was deleted"
          schema:
            type: "string"
        "400":
          description: "Product does not exist."
          schema:
            type: "string"
        "403":
          description: "session expired"
          schema:
            type: "array"
            items:
             $ref: "#/definitions/Expired"
  /products:
    get:
      tags:
      - "products"
      summary: "Get a list of all the products availables"
      description: ""
      operationId: "getProduct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "token"
        type: "string"
        description: "Token to authenticate."
        required: true
      responses:
        "200":
          description: "List of the all products availables"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/product"
        "403":
          description: "Session expired or User do not have permissions to access."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Expired"      
    post:
      tags:
      - "products"
      summary: "Add a new product to the list of products"
      description: ""
      operationId: "addPlate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "product"
        description: "Product JSON object that needs to be added to the menu"
        required: true
        schema:
          $ref: "#/definitions/productPost"
      - in: "header"
        name: "token"
        type: "string"
        description: "Token to authenticate."
        required: true    
      responses:
        "201":
          description: "Product created"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/productResponse"
        "400":
          description: "Name, price and active are required."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Expired"      
        "409":
          description: "Product already exist"
          schema: 
            type: "string"
    put:
      tags:
      - "products"
      summary: "Update an existing product"
      description: ""
      operationId: "updatePlate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "product"
        description: "Product JSON object that needs to be updated to the menu"
        required: true
        schema:
          $ref: "#/definitions/product"
      - in: "header"
        name: "token"
        type: "string"
        description: "Token to authenticate."
        required: true
      responses:
        "200":
          description: "Product has been updated."
          schema:
           type: "string"
        "400":
          description: "Product does not exist."
          schema:
           type: "string"
        "403":
          description: "Session expired or User do not have permissions to access."
          schema:
           type: "array"
           items:
             $ref: "#/definitions/Expired"
  /order/id:
    get:
      tags:
      - "orders"
      summary: "Get a record of an order by id"
      description: "Returns a record of an specific order by id (param). URL Example: http://localhost:3000/orders/3?includeUser=true&includeOrderStatus=true&includePaymentMethod=true// "
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "token"
        type: "string"
        description: "Token to authenticate."
        required: true
      responses:
        "200":
          description: "Successful operation"
          schema:
           type: "array"
           items:
             $ref: "#/definitions/order"
        "403":
          description: "Session expired or User do not have permissions to access."
          schema:
           type: "array"
           items:
             $ref: "#/definitions/Expired" 
        "404":
          description: "Not found"
  /orders:
    get:
      tags:
      - "orders"
      summary: "Get all orders of the users"
      description: "Return a record of all orders of the user URL example: http://localhost:3000/orders?includeUser=true&includeOrderStatus=true&includePaymentMethod=true. Manager can get orders of all users."
      operationId: "getRecord"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "token"
        type: "string"
        description: "Token to authenticate."
        required: true
      responses:
        "200":
          description: "Successful operation"
          schema:
           type: "array"
           items:
             $ref: "#/definitions/order"
        "403":
          description: "Session expired or User do not have permissions to access."
          schema:
           type: "array"
           items:
             $ref: "#/definitions/Expired"
    post:
      tags:
      - "orders"
      summary: "Creates new order"
      description: "Creates a new order with (user id, order status id and payment method id)."
      operationId: "postOrder"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "order"
        description: "JSON object that needs to create a new order"
        required: true
        schema:
          $ref: "#/definitions/orderToPost"
      - in: "header"
        name: "token"
        type: "string"
        description: "Token to authenticate."
        required: true
      responses:
        "200":
          description: "Created"
          schema:
           type: "object"
           properties:
             order_id: 
               type: "integer"
        "400":
          description: "User_id, payment_method_id and order_status_id are required."
          schema:
           type: "object"
           properties:
             error:
              type: "string"
        "403":
          description: "Session expired or User do not have permissions to access."
          schema:
           type: "object"
           properties:
             error:
              type: "string"
    put:
      tags:
      - "orders"
      summary: "Manager update an order"
      description: "Update an specific order"
      operationId: "putOrder"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "order"
        description: "JSON object that needs to create a new order"
        required: true
        schema:
          type: "object"
          properties:
            id:
              type: "integer"
            order_status_id:
              type: "integer"
            payment_method_id:
              type: "integer"
      - in: "header"
        name: "token"
        type: "string"
        description: "Token to authenticate."
        required: true
      responses:
        "200":
          description: "Order has been updated"
          schema:
            type: "string"
        "400":
          description: "Id field is required"
          schema:
            type: "string"
        "403":
          description: "Session expired or User do not have permissions to access."
          schema:
            type: "object"
            properties:
             error:
              type: "string"    
        "404":
          description: "Order was not found"
          schema:
            type: "string"    
    delete:
      tags:
      - "orders"
      summary: "Delete an order by id (param)"
      description: "Cancel a specific order"
      operationId: "deleteOrder"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "id"
        type: "integer"
        description: "Id of order to delete."
        required: true
      - in: "header"
        name: "token"
        type: "string"
        description: "Token to authenticate."
        required: true
      responses:
        "204":
          description: "No content (deleted successful)."
        "403":
          description: "Session expired or User do not have permissions to access."
          schema:
            type: "object"
            properties:
             error:
              type: "string"  
        "404":
          description: "Order was not found."
          schema:
            type: "string"
  /orders/id/oderDetails:
    get:
      tags:
      - "orders"
      summary: "Get the details of an specific order"
      description: ""
      operationId: "getMenu"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "id"
        type: "integer"
        description: "Id of the order."
        required: true
      - in: "header"
        name: "token"
        type: "string"
        description: "Token to authenticate."
        required: true
      responses:
        "200":
          description: "Results found"
          schema:
           type: "array"
           items:
            type: "object"
            properties:
             id:
              type: "integer"
             order_id: 
              type: "integer"
             product_id: 
              type: "integer"
             product_name: 
              type: "string"
             quantity:
              type: "integer"
             price:
              type: "integer"
        "403":
          description: "Session expired or User do not have permissions to access."
          schema:
            type: "object"
            properties:
             error:
              type: "string"      
        "404":
          description: "Not found (Order was not found)."
  /users:
    get:
      tags:
      - "users"
      summary: "Get an specific user if not manager or get all user if is manager"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        type: "string"
        name: "token"
        description: "Token to authenticate"
        required: true
      responses:
       "200":
        description: "successful operation"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
       "403":
        description: "session expired"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Expired"
    post:
      tags:
      - "users"
      summary: "Create a new user (user sign up)"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON Object with all user information."
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/UserToPost"
      responses:
       "200":
        description: "Successful operation"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/signUp"
       "400":
        description: "user_name, full_name, email, phone, address and password are required."
        schema:
          type: "array"
          items:
            $ref: "#/definitions/alreadyExist"    
       "409":
        description: "Username or email don't availables, User already exists."
        schema:
          type: "array"
          items:
            $ref: "#/definitions/alreadyExist"      
    put:
      tags:
      - "users"
      summary: "Update an user (phone, address, email)"
      description: ""
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON object with properties to update, one or all properties that want to update."
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/UserToUpdate"
      - in: "header"
        type: "string"
        name: "token"
        description: "Token to authenticate"
        required: true    
      responses:
       "200":
        description: "User has been updated"
        schema:
          type: "string"
       "401":
        description: "Insufficient privileges to update users. Please remove id property."
        schema:
          type: "string"
       "403":
        description: "Session expired or User do not have permissions to access."
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Expired"
       "404":
          description: "User does not exist"
          schema:
           type: "string"      
  /users/id:        
    delete:
      tags:
      - "users"
      summary: "Delete an user by id"
      description: "Delete an specific user only by manager"
      operationId: "deleteUserr"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        type: "integer"
        name: "id"
        description: "Id of the user to be deleted"
        required: true
      - in: "header"
        type: "string"
        name: "token"
        description: "Token to authenticate"
        required: true
      responses:
        "200":
          description: "User was deleted successfully"
          schema:
           type: "string"
        "401":
          description: "Request not allowed, you do not have permission."
          schema:
            type: "array"
            items:
             $ref: "#/definitions/Expired"
        "404":
          description: "User does not exist"
          schema:
           type: "string"
  /users/login:
    post:
      tags:
      - "users"
      summary: "Registered user login"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON Object with password and username or email"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/login"
      responses:
        "200":
          description: "token"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/token"
        "401":
          description: "User does not exist."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Expired"      
  /users/changePassword:
    put:
      tags:
      - "users"
      summary: "Change user password"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "password"
        description: "The new password to update."
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/password"
      - in: "header"
        type: "string"
        name: "token"
        description: "Token to authenticate."
        required: true      
      responses:
        "200":
          description: "Password has been updated."
          schema:
            type: "string"
        "400":
          description: "Password length must be greater than 3."
          schema:
            type: "string"    
        "403":
          description: "Session expired or User do not have permissions to access."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Expired" 
  /orderDetails:
    post:
      tags:
      - "orderDetails"
      summary: "Create the order detail"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "order"
        description: "JSON object that needs to create a new order detail"
        required: true
        schema:
          type: "object"
          properties:
            order_id:
              type: "integer"
            products:
              type: "object"
              properties:
                product_id:
                  type: "integer"
                quantity:
                  type: "integer"
      - in: "header"
        type: "string"
        name: "token"
        description: "Token to authenticate."
        required: true            
      responses:
        "200":
          description: "successful operation"
    put:
      tags:
      - "orderDetails"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: ""
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "orderDetails"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /paymentMethods:
    get:
      tags:
      - "paymentMethods"
      summary: "Get list of payment methods"
      description: ""
      operationId: "getPaymentMethods"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
    post:
      tags:
      - "paymentMethods"
      summary: "Post a payment method"
      description: ""
      operationId: "postPaymentMethod"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
    put:
      tags:
      - "paymentMethods"
      summary: "Update a payment method"
      description: ""
      operationId: "updatePaymentMethod"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
    delete:
      tags:
      - "paymentMethods"
      summary: "Delete a payment method"
      description: ""
      operationId: "deletePaymentMethod"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /orderStatuses:
    get:
      tags:
      - "orderStatuses"
      summary: "Get list of order statuses"
      description: ""
      operationId: "getOrderStatuses"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
    post:
      tags:
      - "orderStatuses"
      summary: "Create a new order status"
      description: ""
      operationId: "postOrderStatuses"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
    put:
      tags:
      - "orderStatuses"
      summary: "Update an order status"
      description: ""
      operationId: "updateOrderStatuses"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
    delete:
      tags:
      - "orderStatuses"
      summary: "Delete an order status"
      description: ""
      operationId: "deleteOrderStatuses"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_name:
        type: "string"
      full_name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "integer"
        format: "int64"
      address:
        type: "string"
      password:
        type: "string"
      admin:
        type: "boolean"
        default: false
        description: "User Status"
    xml:
      name: "User"
  UserToPost:
    type: "object"
    properties:
      user_name:
        type: "string"
      full_name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "integer"
        format: "int64"
      address:
        type: "string"
      password:
        type: "string"
    xml:
      name: "UserToPost"
  UserToUpdate:
    type: "object"
    properties:
      id:
        type: "integer"
      phone:
        type: "string"
      address:
        type: "string"
      email:
        type: "string"
    xml:
      name: "UserToUpdate"    
  Expired:
    type: "object"
    properties:
      error:
        type: "string"
        format: "int64"
    xml:
      name: "Expired"
  alreadyExist:
    type: "object"
    properties:
      error:
       type: "string"
       format: "int64"
    xml:
      name: "alreadyExist"    
  signUp:
    type: "object"
    properties:
      user_id:
        type: "integer"
        format: "int64"
    xml:
      name: "signUp"
  login:
    type: "object"
    properties:
      user_name:
        type: "string"
      password:
        type: "string"
    xml:
      name: "login"
  token:
    type: "object"
    properties:
      token:
        type: "string"
    xml:
      name: "token"
  password:
    type: "object"
    properties:
      password:
        type: "string"
    xml:
      name: "pasword"
  product:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      price:
        type: "integer"
      active:
        type: "boolean"
    xml:
      name: "product"
  productPost:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "integer"
      active:
        type: "boolean"
    xml:
      name: "productPost"
  productResponse:
    type: "object"
    properties:
      product_id:
        type: "integer"
    xml:
      name: "productResponse"
  order:
    type: "object"
    properties:
      id:
        type: "integer"
      user_id:
        type: "integer"
      order_status_id:
        type: "integer"
      payment_method__id:
        type: "integer"  
      user:
        type: "object"
        properties:
          full_name:
            type: "string"
          address:
            type: "string"
          phone:
            type: "string"
          email:
            type: "string"
      oderStatus: 
       type: "object"
       properties:
         id:
           type: "integer"
         name:
           type: "string"
      paymentMethods:
       type: "object"
       properties:
         id:
           type: "integer"
         name:
           type: "string"
    xml:
      name: "order"
  orderToPost:
    type: "object"
    properties:
      user_id:
        type: "integer"
      order_status_id:
        type: "integer"
      payment_method_id:
        type: "integer"  
    xml:
      name: "orderToPost"    
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"